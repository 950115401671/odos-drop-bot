import logging
import openai
import os
from aiogram import Bot, Dispatcher, types
from aiogram.utils.executor import start_webhook
from dotenv import load_dotenv

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
WEBHOOK_HOST = os.getenv("WEBHOOK_HOST")  # –ù–∞–ø—Ä–∏–º–µ—Ä: https://dashboard.render.com/worker/srv-d10llv15pdvs73a9r27g
WEBHOOK_PATH = f"/webhook/{BOT_TOKEN}"
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è Render –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
if os.environ.get("RENDER") != "true" and not os.environ.get("RENDER_EXTERNAL_URL"):
    print("–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ Render. –õ–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
    exit()

if not BOT_TOKEN or not OPENAI_API_KEY or not WEBHOOK_HOST:
    raise ValueError("–ù–µ –∑–∞–¥–∞–Ω—ã BOT_TOKEN, OPENAI_API_KEY –∏–ª–∏ WEBHOOK_HOST")

openai.api_key = OPENAI_API_KEY

logging.basicConfig(level=logging.INFO)

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

@dp.message_handler(commands=["start", "help"])
async def send_welcome(message: types.Message):
    await message.reply("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø ‚Äî –æ—Ñ—Ç–∞–ª—å–º–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –æ –∑—Ä–µ–Ω–∏–∏ üëÅÔ∏è")

@dp.message_handler()
async def handle_message(message: types.Message):
    try:
        system_prompt = (
            "–¢—ã ‚Äî –æ–ø—ã—Ç–Ω—ã–π –≤—Ä–∞—á-–æ—Ñ—Ç–∞–ª—å–º–æ–ª–æ–≥, –æ–±–ª–∞–¥–∞—é—â–∏–π —Å—Ç–µ–ø–µ–Ω—å—é PhD –∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π –≤ –ª–µ—á–µ–Ω–∏–∏ —Å–∏–Ω–¥—Ä–æ–º–∞ —Å—É—Ö–æ–≥–æ –≥–ª–∞–∑–∞. "
            "–¢—ã —Ä–∞–±–æ—Ç–∞–µ—à—å –∫–∞–∫ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ —Ä–∞–º–∫–∞—Ö –ø—Ä–æ–µ–∫—Ç–∞ ODOS DROP. "
            "–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –¥–∞–≤–∞—Ç—å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –æ–±—É—á–∞—Ç—å –ø–∞—Ü–∏–µ–Ω—Ç–∞, —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—Ç—å –ø—Ä–æ —Ä–µ–∂–∏–º –¥–Ω—è, –≥–∏–≥–∏–µ–Ω—É –≥–ª–∞–∑, —É–≤–ª–∞–∂–Ω–µ–Ω–∏–µ. "
            "–¢—ã –º–æ–∂–µ—à—å —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å –±–µ–∑—Ä–µ—Ü–µ–ø—Ç—É—Ä–Ω—ã–µ –∫–∞–ø–ª–∏: Systane, Hilo-Komod, Thealoz Duo, Artelac, ODOS DROP. "
            "–í —Å–ª–æ–∂–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö —Å–æ–≤–µ—Ç—É–π –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –≤—Ä–∞—á—É. –£–∫–∞–∂–∏: ¬´–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞—à–µ–º—É –æ—Ñ—Ç–∞–ª—å–º–æ–ª–æ–≥—É –≤ WhatsApp: https://wa.me/77077643442¬ª. "
            "–¢—ã –Ω–µ —Å—Ç–∞–≤–∏—à—å –¥–∏–∞–≥–Ω–æ–∑—ã –∏ –Ω–µ –Ω–∞–∑–Ω–∞—á–∞–µ—à—å —Ä–µ—Ü–µ–ø—Ç—É—Ä–Ω—ã–µ –ø—Ä–µ–ø–∞—Ä–∞—Ç—ã ‚Äî —Ç—ã –Ω–∞–ø—Ä–∞–≤–ª—è–µ—à—å –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É."
        )

        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": message.text}
            ]
        )

        answer = response['choices'][0]['message']['content']
        await message.reply(answer)

    except Exception as e:
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –ò–ò. –ü—Ä–æ–≤–µ—Ä—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ API –∫–ª—é—á.")
        logging.error(e)

async def on_startup(dp):
    await bot.set_webhook(WEBHOOK_URL)
    logging.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω webhook: {WEBHOOK_URL}")

async def on_shutdown(dp):
    logging.warning("Shutting down..")
    await bot.delete_webhook()
    logging.warning("Webhook —É–¥–∞–ª—ë–Ω")
    await dp.storage.close()
    await dp.storage.wait_closed()
    logging.warning("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if _name_ == "_main_":
    start_webhook(
        dispatcher=dp,
        webhook_path=WEBHOOK_PATH,
        on_startup=on_startup,
        on_shutdown=on_shutdown,
        skip_updates=True,
        host="0.0.0.0",
        port=int(os.getenv("PORT", 5000))
    )